# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.2-cli

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist
      - run: composer require symfony/phpunit-bridge:3.4.42
      - run: composer require symfony/http-foundation:3.4.42
      - run: composer require symfony/framework-bundle:3.4.42
      - run: composer require symfony/security-core:3.4.42
      - run: composer require symfony/console:3.4.42
      - run: composer require codeclimate/php-test-reporter
      - run: composer require symfony/serializer
      - run: composer require symfony/property-access

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      #- restore_cache:
      #    keys:
      #      - node-v1-{{ checksum "package.json" }}
      #      - node-v1-
      #- run: yarn install
      #- save_cache:
      #    key: node-v1-{{ checksum "package.json" }}
      #    paths:
      #      - node_modules

      # prepare the database
      #- run: touch storage/testing.sqlite
      #- run: php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      - run: sudo pecl channel-update pecl.php.net
      - run: sudo docker-php-ext-enable xdebug
      - run: php --ini
      - run: php -v
      #- run: echo “zend_extension=/wherever/you/put/it/xdebug” >> /opt/circleci/php/$(phpenv global)/etc/php.ini
      - run: curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      - run: chmod +x ./cc-test-reporter
      - run: sudo mkdir -p $CIRCLE_TEST_REPORTS/phpunit
      - run: ./cc-test-reporter before-build
      - run: ./vendor/bin/phpunit --coverage-clover=clover.xml
      - run: ./cc-test-reporter after-build -t clover --exit-code $?
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run
